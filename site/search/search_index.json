{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"April/lesson1/","title":"Lesson 1: Intro to Numpy","text":""},{"location":"April/lesson1/#lesson-overview","title":"Lesson Overview","text":"<p>This self-study guide will cover how to use NumPy arrays. We will explore array creation, indexing and array math. Although you will not directly deal with NumPy arrays for your final project, it is a useful tool to learn and understand. This lesson will assume you have a working Python environment using Python (3.10.12) or later.</p>"},{"location":"April/lesson1/#installation","title":"Installation","text":"<p>The installation of NumPy is very simple. It requires only two steps:  </p> <ol> <li>Install the package (type into terminal): <pre><code>pip install numpy \n</code></pre></li> <li>Import the package (type into python file): <pre><code>import numpy as np\n</code></pre></li> </ol>"},{"location":"April/lesson1/#numpy-arrays","title":"Numpy Arrays","text":"<p>A numpy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. The number of dimensions is the \"rank\" of the array. The \"shape\" of the array returns the number of dimensions in the form of a tuple. It essentially tells you how many elements there are in each dimension.</p> <p>We can initialize numpy arrays from nested Python lists, and access elements using square brackets: <pre><code>import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(type(a))            # Prints \"&lt;class 'numpy.ndarray'&gt;\"\nprint(a.shape)            # Prints \"(3,)\"\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n\nb = np.array([[1,2,3],[4,5,6]])    # Create a rank 2 array\nprint(b.shape)                     # Prints \"(2, 3)\"\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre></p>"},{"location":"April/lesson1/#practice","title":"Practice","text":"<p>What is the rank of the following array? <pre><code>a = np.array([[1, 2, 3], [3, 2, 1]])\n</code></pre> Answer: 2    </p> <p>What is the shape of the following array? <pre><code>a = np.array([[9, 8, 7, 6], [3, 2, 5, 1]])\n</code></pre> Answer: a.shape = (2, 4)</p> <p>What is the output of the following line? <pre><code>a = np.array([[9, 8, 7, 6], [3, 2, 5, 1]])\nprint(a[0, 3], a[1, 2])\n</code></pre> Answer: 6 5</p>"},{"location":"April/lesson1/#indexing","title":"Indexing","text":"<p>Numpy offers several ways to index into arrays.</p> <p>Slicing: Similar to Python lists, numpy arrays can be sliced. Since arrays may be multidimensional, you must specify a slice for each dimension of the array</p> <pre><code>import numpy as np\n\n# Create the following rank 2 array with shape (3, 4)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n\n# Use slicing to pull out the subarray consisting of the first 2 rows\n# and columns 1 and 2; b is the following array of shape (2, 2):\n# [[2 3]\n#  [6 7]]\n\nb = a[:2, 1:3]  \n\n# A slice of an array is a view into the same data, so modifying it\n# will modify the **ORIGINAL** array. A slice is NOT a copy. This is\n# a key concept with NumPy arrays.\nprint(a[0, 1])   # Prints \"2\"\nb[0, 0] = 77     # b[0, 0] is the same piece of data as a[0, 1]\nprint(a[0, 1])   # Prints \"77\"\n</code></pre>"},{"location":"April/lesson1/#practice_1","title":"Practice","text":"<p>What is the output of the following lines of code? <pre><code>a = np.array([[1, 2, 3], [4, 5, 6]])\nb = a[0:2, 0:2]\nprint(b)\n</code></pre> Answer: [[1, 2], [4, 5]] Using a and b from the previous question, what is the new output? <pre><code>b[1, 1] = 10\nprint(b)\nprint(a)\n</code></pre> Answer: [[1, 2], [4, 10]]         [[1, 2, 3], [4, 10, 6]]</p>"},{"location":"April/lesson1/#math","title":"Math","text":"<p>Basic mathematical functions operate elementwise on arrays (Operation is applied to each element rather than the array as a whole). The reason why we use NumPy operations is that it can compute these operations much faster compared to regular array operations. <pre><code>import numpy as np\n\nx = np.array([[1,2],[3,4]], dtype=np.float64) # dtype just means the datatype\ny = np.array([[5,6],[7,8]], dtype=np.float64) # float64 are decimal numbers\n\n# Elementwise sum; both produce the array\nprint(x + y)\nprint(np.add(x, y))\n# [[ 6.0  8.0]\n#  [10.0 12.0]]\n\n# Elementwise difference; both produce the array\nprint(x - y)\nprint(np.subtract(x, y))\n# [[-4.0 -4.0]\n#  [-4.0 -4.0]]\n\n# Elementwise product; both produce the array\nprint(x * y)\nprint(np.multiply(x, y))\n# [[ 5.0 12.0]\n#  [21.0 32.0]]\n\n# Elementwise division; both produce the array\nprint(x / y)\nprint(np.divide(x, y))\n# [[ 0.2         0.33333333]\n#  [ 0.42857143  0.5       ]]\n\n# Elementwise square root; produces the array\nprint(np.sqrt(x))\n# [[ 1.          1.41421356]\n#  [ 1.73205081  2.        ]]\n</code></pre></p>"},{"location":"April/lesson1/#practice_2","title":"Practice","text":"<p>What is the output of the following line <pre><code>x = np.array([[1,3],[23,69]], dtype=np.float64) # dtype just means the datatype\ny = np.array([[69,23],[3,1]], dtype=np.float64) # float64 are decimal numbers\nprint(np.multiply(x, y))\n</code></pre> Answer: [[69, 69], [69, 69]]</p>"},{"location":"April/lesson1/#next-steps","title":"Next Steps","text":"<p>If you want to learn more about NumPy, here are some resources: W3schools (Website) freeCodeCamp (Video tutorial) Otherwise, proceed to the next lesson!</p>"},{"location":"December/resources/","title":"Resources","text":""},{"location":"December/resources/#brief-intro","title":"Brief Intro","text":"<p>This study guide will be self-directed as the AI world is vast, meaning it cannot be covered in a few pages. If the slideshow's definitions were confusing to you, there are plenty of free resources available to ensure you reach full understanding.</p>"},{"location":"December/resources/#resources_1","title":"Resources","text":"<p>To start, the 3Blue1Brown channel contains many videos on DL, specifically neural networks, all for free. Check out their playlist on neural networks here: 3Blue1Brown</p> <p>If you want to combine your knowledge of ML techniques with python, there is a free course by freeCodeCamp. Check out this video: freeCodeCamp</p> <p>If you want to follow through an online course directed by an industry leader, along with earn a certificate to add to your resume, check out this Coursera course: Coursera (Note: Purchase needed)</p> <p>If you want to learn about AI as a whole in Python, check out the sentdex YouTube channel. It features an abundance of videos/tutorials (1000+) on any topic you can think of!  </p> <p>If you want to learn by reading, check out W3 schools's course on ML and Tensorflow: W3 Schools </p>"},{"location":"October/lesson1/","title":"Lesson 1: Object Oriented Programming","text":""},{"location":"October/lesson1/#day-1","title":"Day 1","text":""},{"location":"October/lesson1/#overview","title":"Overview","text":"<p>This self-study guide will cover how to use object oriented programming. This will include making classes, constructors and methods inside classes, along with calling these functions. This lesson will assume you have a working Python environment using Python (3.10.12) or later, though you only need version 3.0.0 to follow most of the course</p>"},{"location":"October/lesson1/#day-2","title":"Day 2","text":""},{"location":"October/lesson1/#classes","title":"Classes","text":"<p>Classes can represent any object that has properties and/or functions. For example a car has properties of the number of wheels, the length width, etc... Classes can also include subclasses such as a wheel for the example of a car.&gt;</p>"},{"location":"October/lesson1/#day-3","title":"Day 3","text":""},{"location":"October/lesson1/#declaration","title":"Declaration","text":"<p>To declare a class use the class keyword follow by the name of the class. Like functions the contents of the class MUST be indented</p> <pre><code>class Car:\n</code></pre>"},{"location":"October/lesson1/#day-4","title":"Day 4","text":""},{"location":"October/lesson1/#fields-and-constructor","title":"Fields and Constructor","text":"<p>The fields of the class are variables that the class needs such as wheels or length in the previous example. Constructors are a function that is called when the class is initialized. This can include setting default values or setting values from the user.</p> <p>In python a constructor MUST be called \"__init__\"</p> <p>Heres an example of a field and constructor.</p> <pre><code>class Car:\n    __init__(self, brand, color, integrity):\n      self.brand = brand\n      self.color = color\n      self.integrity = integrity\n</code></pre> <p>Note that the first argument is self representing the object that is created</p>"},{"location":"October/lesson1/#day-5","title":"Day 5","text":"<p>As said before classes can have functions that can modify that data or perform another task. As an example of a car we can repair it increasing the integrity</p> <pre><code>class Car:\n    __init__(self, brand, color, integrity):\n      self.brand = brand\n      self.color = color\n      self.integrity = integrity\n    repair(self):\n        if (self.integrity &gt; 80):\n            self.integrity = 100\n        else:\n            self.integrity += 20\n</code></pre> <p>This will increase the cars integrity by 20% when called</p>"},{"location":"October/lesson1/#day-6","title":"Day 6","text":""},{"location":"October/lesson1/#create-an-object","title":"Create an object","text":"<p>To create an object of the class you can just initialize a variable of the class</p> <pre><code>car1 = Car(\"Toyota\", \"red\", 99)\n</code></pre> <p>This will create a red toyota with 99% integrity</p>"},{"location":"October/lesson1/#day-7","title":"Day 7","text":"<p>Create a class plan which represents the properties of a plane such as length, capacity, color, maker etc... Make sure you add a constructor and some functions such as fly and land</p>"},{"location":"October/lesson1/#next-steps","title":"Next Steps","text":"<p>Read about OOP on W3Schools if you want more information or continue to the next lesson</p>"},{"location":"October/lesson2/","title":"Lesson 2: Object Oriented Programming","text":""},{"location":"October/lesson2/#overview","title":"Overview","text":"<p>This self-study guide will cover how to use object oriented programming for more advanced cases. This will include inheritance, abstraction, encapsulation and polymorphism This lesson will assume you have a working Python environment using Python (3.10.12) or later, though you only need version 3.0.0 to follow most of the course</p>"},{"location":"October/lesson2/#the-4-pillars-of-object-oriented-programming","title":"The 4 Pillars of Object Oriented Programming","text":"<p>There are 4 main pillars in Object-Oriented Programming or (OOP) which are essential for good code. These are abstraction, inheritance, encapsulation and polymorphism</p>"},{"location":"October/lesson2/#inheritance","title":"Inheritance","text":"<p>Inheritance is when you a class is based on another class. For example you can have a vehicle class, and subclasses inheriting from them such as cars, trucks and planes</p> <pre><code>class Vehicle:\n  __init__(self, color, speed):\n    self.color = color\n    self.speed = speed\n  drive(self):\n    print(\"Driving at \", speed)\n\n\nclass Car(Vehicle):\n  __init__(self, color, wheels, speed):\n    self.color = color\n    self.speed = speed\n    self.wheels = wheels\n\nclass Boat(Vehicle):\n  __init__(self, color, speed, captain):\n    self.color = color\n    self.speed = speed\n    self.captain = captain\n</code></pre>"},{"location":"October/lesson2/#abstraction","title":"Abstraction","text":"<p>Abstraction is when you hide the background process going on to do a task, and only see the end result of the task which is the only thing they need to see.</p> <pre><code>class Car:\n</code></pre>"},{"location":"October/lesson2/#fields-and-constructor","title":"Fields and Constructor","text":"<p>The fields of the class are variables that the class needs such as wheels or length in the previous example. Constructors are a function that is called when the class is initialized. This can include setting default values or setting values from the user.</p> <p>In python a constructor MUST be called \"__init__\"</p> <p>Heres an example of a field and constructor.</p> <pre><code>class Car:\n    __init__(self, brand, color, integrity):\n      self.brand = brand\n      self.color = color\n      self.integrity = integrity\n</code></pre> <p>Note that the first argument is self representing the object that is created</p> <p>As said before classes can have functions that can modify that data or perform another task. As an example of a car we can repair it increasing the integrity</p> <pre><code>class Car:\n    __init__(self, brand, color, integrity):\n      self.brand = brand\n      self.color = color\n      self.integrity = integrity\n    repair(self):\n        if (self.integrity &gt; 80):\n            self.integrity = 100\n        else:\n            self.integrity += 20\n</code></pre> <p>This will increase the cars integrity by 20% when called</p>"},{"location":"October/lesson2/#create-an-object","title":"Create an object","text":"<p>To create an object of the class you can just initialize a variable of the class</p> <pre><code>car1 = Car(\"Toyota\", \"red\", 99)\n</code></pre> <p>This will create a red toyota with 99% integrity</p>"},{"location":"October/lesson2/#next-steps","title":"Next Steps","text":"<p>Read about OOP on W3Schools if you want more information or continue to the next lesson</p>"},{"location":"September/lesson1/","title":"Lesson 1: Your First Program","text":""},{"location":"September/lesson1/#programming-basics","title":"Programming Basics","text":"<p>This lesson will go over how to make your first program in Python which is one of the most popular, simple and widely used programming languages out there. This will teach basic concepts such as output, input, variables, loops and conditionels. This lesson will assume you have a working Python environment using Python (3.10.12) or later.</p>"},{"location":"September/lesson1/#output","title":"Output","text":"<p>To print text into the conosle, use the print(\"function)</p> <pre><code>print(\"Hello World!\")\n</code></pre> <p>Output:</p> <pre><code>Hello World!\n</code></pre> <p>This function will output Hello World! into the terminal. Text must be wrapped within quotes (This is called a string)</p> <p>To print a number, you can do the same thing without the quote as numbers are not a string</p> <pre><code>print(9)\n</code></pre> <p>Output:</p> <pre><code>9\n</code></pre>"},{"location":"September/lesson1/#variables","title":"Variables","text":"<p>Variables store data into memory to be accessed later. A variable must have a name to be assigned and a value. To decalre a variable type this</p> <pre><code>age = 15\n</code></pre> <p>This will assign the variable \"age\" to the value 15. This value can be access later in different situations, by replacing the value with the variable</p> <pre><code>print(age)\n</code></pre> <p>Output:</p> <pre><code>15\n</code></pre> <p>The value can be modified later also, but it will only apply to the lines after it is changed</p> <pre><code>age = 10\nprint(age)\nage = 15\nprint(age)\n</code></pre> <p>Output:</p> <pre><code>10\n15\n</code></pre> <p>There are 4 main types of variables we will go in this lesson each representing different values</p>"},{"location":"September/lesson1/#strings","title":"Strings","text":"<p>These values represent text and is surruounded with single or double quotes</p> <pre><code>name = \"bob\"\nname2 = 'john'\n</code></pre>"},{"location":"September/lesson1/#integers","title":"Integers","text":"<p>These values represent a non decimal number postive or negative</p> <pre><code>age = 15\nscore = 99\n</code></pre>"},{"location":"September/lesson1/#floats","title":"Floats","text":"<p>These values represent a postive or negative decimal</p> <pre><code>cost = 4.99\nlength = 9.87\n</code></pre>"},{"location":"September/lesson1/#booleans","title":"Booleans","text":"<p>These values represent a value of either True or False</p> <pre><code>is_allowed = True\nis_male = False\n</code></pre>"},{"location":"September/lesson1/#input","title":"Input","text":"<p>To recieve an input from the user and store it into a variable, use the input() function</p> <pre><code>name = input(\"Please enter your name\")\n</code></pre> <p>To use recieve non-strings as input, you must convert it into that type</p> <pre><code>age = int(input(\"Please enter your name\"))\ncost = float(input(\"Please enter the cost\"))\n</code></pre> <p>For boolean, an empty string or the number 0 is False, while other values are considered True</p>"},{"location":"September/lesson1/#next-steps","title":"Next Steps","text":"<p>Read the next lesson</p>"},{"location":"September/lesson2/","title":"Lesson 2: Conditionals and Loops","text":""},{"location":"September/lesson2/#programming-basics","title":"Programming Basics","text":"<p>This lesson will go over how to loop over data and use conditionals to add dynamic code to your project. This lesson will assume you have a working Python environment using Python (3.10.12) or later.</p>"},{"location":"September/lesson2/#conditional","title":"Conditional","text":"<p>To check if a variable is equal to a value, use the if statement</p> <pre><code>age = 5\nif (age == 5):\n   print(\"You are 5 years old\")\n</code></pre> <p>Output:</p> <pre><code>You are 5 years old\n</code></pre> <p>Note that we used two equal signs. This notes that it is a condition, not a declaration of a variable. Code that runs after a condition is true must be indented either 2 or 4 spaces relative to the statement</p> <p>To use the greater, greater or equal, less, less or equal signs, use the following signs in order &gt; (greater), &gt;= (greater or equal), &lt; (less), (&lt;=) less or equal</p> <pre><code>age = 4\nif (age &lt; 5):\n   print(\"You are less than 5 years old\")\n</code></pre> <p>Output:</p> <pre><code>You are less than 5 years old\n</code></pre> <p>The same is true for all the other signs</p>"},{"location":"September/lesson2/#negation","title":"Negation","text":"<p>To run the statement if the condition is NOT True use the exclamatoin mark ! or use the not keyword</p> <pre><code>name = \"Bob\"\nif (name != \"John\"):\n   print(\"Your name is Bob\")\n</code></pre> <p>This piece of code run if the name is NOT \"John\"</p>"},{"location":"September/lesson2/#else-statements","title":"Else statements","text":"<p>This piece of code runs if the previvous condition is not true. For example if the age is not greater than 15 than can run another condition</p> <pre><code>name = \"Bob\"\nif (name != \"John\")\n  print(\"Your name is Bob\")\nelse:\n  print(\"Your name is John\")\n</code></pre> <p>The else statement will run ONLY if the name is John</p>"},{"location":"September/lesson2/#else-if-statements","title":"Else if statements","text":"<p>This piece of code runs if the previvous condition is not true. Unlike an else this includes a condition. Multiple else if can be used in paralled going from the top to the bottom</p> <pre><code>name = \"Bob\"\nif (name == \"Bob\")\n  print(\"Your name is Bob\")\nelse if (name == \"John\"):\n   print(\"Your name is John\")\nelse if (name == \"Edward\"):\n  print(\"Your name is Edward\")\nelse:\n  print(\"Your name is not Bob John or edward\")\n</code></pre>"},{"location":"September/lesson2/#output","title":"Output","text":"<pre><code>Your name is Bob\n</code></pre> <p>The code will run top to bottom from the if to the else. If the condition isnt met it will go to the next statement.</p>"},{"location":"September/lesson2/#loops","title":"Loops","text":"<p>Loops make it easier to run a piece of code continously until a condition is fufilled. There are 2 main types of loops: a while loop and a for loop</p>"},{"location":"September/lesson2/#while-loops","title":"While Loops","text":"<p>While loops run until a condition is fufilled. If that condition is not fufilled it will continue running. If you put while (True) it will run forever, while doing While(False) will make it not run</p> <pre><code>password = \"\"\nwhile (password != \"password123\")\n  password = input(\"Please enter the password \")\nprint(\"Access Granted\")\n</code></pre>"},{"location":"September/lesson2/#input","title":"Input","text":"<pre><code>Please enter the password bob\nPlease enter the password bob2\nPlease enter the password password123\n</code></pre>"},{"location":"September/lesson2/#output_1","title":"Output","text":"<pre><code>Access Granted\n</code></pre>"},{"location":"September/lesson2/#for-loops","title":"For Loops","text":"<p>For loops run for a set number of times, not until a condition is fufilled. For example you can make it run 3 times then exit.</p> <pre><code>for i in range(5):\n  print(i)\n</code></pre>"},{"location":"September/lesson2/#output_2","title":"Output","text":"<pre><code>0\n1\n2\n3\n4\n</code></pre> <p>In this loop i represents the current number and range(5) represnts the number up to 5, but not including 5 (0, 1, 2, 3, 4)</p>"},{"location":"September/lesson2/#break-statements","title":"Break statements","text":"<p>Break statements manually exit the loop even if the outer condition is not fufilled or the set number of times the loop should run is not reached</p> <pre><code>for i in range(5):\n  print(i)\n  if (i == 2):\n    break\n</code></pre>"},{"location":"September/lesson2/#output_3","title":"Output","text":"<pre><code>0\n1\n2\n</code></pre>"},{"location":"September/lesson2/#next-steps","title":"Next Steps","text":"<p>Read the next lesson (1.3)</p>"}]}