{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"April/lesson1/","title":"Lesson 1: Intro to Numpy","text":""},{"location":"April/lesson1/#lesson-overview","title":"Lesson Overview","text":"<p>This self-study guide will cover how to use NumPy arrays. We will explore array creation, indexing and array math. Although you will not directly deal with NumPy arrays for your final project, it is a useful tool to learn and understand. This lesson will assume you have a working Python environment using Python (3.10.12) or later.</p>"},{"location":"April/lesson1/#installation","title":"Installation","text":"<p>The installation of NumPy is very simple. It requires only two steps:  </p> <ol> <li>Install the package (type into terminal): <pre><code>pip install numpy \n</code></pre></li> <li>Import the package (type into python file): <pre><code>import numpy as np\n</code></pre></li> </ol>"},{"location":"April/lesson1/#numpy-arrays","title":"Numpy Arrays","text":"<p>A numpy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. The number of dimensions is the \"rank\" of the array. The \"shape\" of the array returns the number of dimensions in the form of a tuple. It essentially tells you how many elements there are in each dimension.</p> <p>We can initialize numpy arrays from nested Python lists, and access elements using square brackets: <pre><code>import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(type(a))            # Prints \"&lt;class 'numpy.ndarray'&gt;\"\nprint(a.shape)            # Prints \"(3,)\"\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n\nb = np.array([[1,2,3],[4,5,6]])    # Create a rank 2 array\nprint(b.shape)                     # Prints \"(2, 3)\"\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre></p>"},{"location":"April/lesson1/#practice","title":"Practice","text":"<p>What is the rank of the following array? <pre><code>a = np.array([[1, 2, 3], [3, 2, 1]])\n</code></pre> Answer: 2    </p> <p>What is the shape of the following array? <pre><code>a = np.array([[9, 8, 7, 6], [3, 2, 5, 1]])\n</code></pre> Answer: a.shape = (2, 4)</p> <p>What is the output of the following line? <pre><code>a = np.array([[9, 8, 7, 6], [3, 2, 5, 1]])\nprint(a[0, 3], a[1, 2])\n</code></pre> Answer: 6 5</p>"},{"location":"April/lesson1/#indexing","title":"Indexing","text":"<p>Numpy offers several ways to index into arrays.</p> <p>Slicing: Similar to Python lists, numpy arrays can be sliced. Since arrays may be multidimensional, you must specify a slice for each dimension of the array</p> <pre><code>import numpy as np\n\n# Create the following rank 2 array with shape (3, 4)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n\n# Use slicing to pull out the subarray consisting of the first 2 rows\n# and columns 1 and 2; b is the following array of shape (2, 2):\n# [[2 3]\n#  [6 7]]\n\nb = a[:2, 1:3]  \n\n# A slice of an array is a view into the same data, so modifying it\n# will modify the **ORIGINAL** array. A slice is NOT a copy. This is\n# a key concept with NumPy arrays.\nprint(a[0, 1])   # Prints \"2\"\nb[0, 0] = 77     # b[0, 0] is the same piece of data as a[0, 1]\nprint(a[0, 1])   # Prints \"77\"\n</code></pre>"},{"location":"April/lesson1/#practice_1","title":"Practice","text":"<p>What is the output of the following lines of code? <pre><code>a = np.array([[1, 2, 3], [4, 5, 6]])\nb = a[0:2, 0:2]\nprint(b)\n</code></pre> Answer: [[1, 2], [4, 5]] Using a and b from the previous question, what is the new output? <pre><code>b[1, 1] = 10\nprint(b)\nprint(a)\n</code></pre> Answer: [[1, 2], [4, 10]]         [[1, 2, 3], [4, 10, 6]]</p>"},{"location":"April/lesson1/#math","title":"Math","text":"<p>Basic mathematical functions operate elementwise on arrays (Operation is applied to each element rather than the array as a whole). The reason why we use NumPy operations is that it can compute these operations much faster compared to regular array operations. <pre><code>import numpy as np\n\nx = np.array([[1,2],[3,4]], dtype=np.float64) # dtype just means the datatype\ny = np.array([[5,6],[7,8]], dtype=np.float64) # float64 are decimal numbers\n\n# Elementwise sum; both produce the array\nprint(x + y)\nprint(np.add(x, y))\n# [[ 6.0  8.0]\n#  [10.0 12.0]]\n\n# Elementwise difference; both produce the array\nprint(x - y)\nprint(np.subtract(x, y))\n# [[-4.0 -4.0]\n#  [-4.0 -4.0]]\n\n# Elementwise product; both produce the array\nprint(x * y)\nprint(np.multiply(x, y))\n# [[ 5.0 12.0]\n#  [21.0 32.0]]\n\n# Elementwise division; both produce the array\nprint(x / y)\nprint(np.divide(x, y))\n# [[ 0.2         0.33333333]\n#  [ 0.42857143  0.5       ]]\n\n# Elementwise square root; produces the array\nprint(np.sqrt(x))\n# [[ 1.          1.41421356]\n#  [ 1.73205081  2.        ]]\n</code></pre></p>"},{"location":"April/lesson1/#practice_2","title":"Practice","text":"<p>What is the output of the following line <pre><code>x = np.array([[1,3],[23,69]], dtype=np.float64) # dtype just means the datatype\ny = np.array([[69,23],[3,1]], dtype=np.float64) # float64 are decimal numbers\nprint(np.multiply(x, y))\n</code></pre> Answer: [[69, 69], [69, 69]]</p>"},{"location":"April/lesson1/#next-steps","title":"Next Steps","text":"<p>If you want to learn more about NumPy, here are some resources: W3schools (Website) freeCodeCamp (Video tutorial) Otherwise, proceed to the next lesson!</p>"},{"location":"December/resources/","title":"Resources","text":""},{"location":"December/resources/#brief-intro","title":"Brief Intro","text":"<p>This study guide will be self-directed as the AI world is vast, meaning it cannot be covered in a few pages. If the slideshow's definitions were confusing to you, there are plenty of free resources available to ensure you reach full understanding.</p>"},{"location":"December/resources/#resources_1","title":"Resources","text":"<p>To start, the 3Blue1Brown channel contains many videos on DL, specifically neural networks, all for free. Check out their playlist on neural networks here: 3Blue1Brown</p> <p>If you want to combine your knowledge of ML techniques with python, there is a free course by freeCodeCamp. Check out this video: freeCodeCamp</p> <p>If you want to follow through an online course directed by an industry leader, along with earn a certificate to add to your resume, check out this Coursera course: Coursera (Note: Purchase needed)</p> <p>If you want to learn about AI as a whole in Python, check out the sentdex YouTube channel. It features an abundance of videos/tutorials (1000+) on any topic you can think of!  </p> <p>If you want to learn by reading, check out W3 schools's course on ML and Tensorflow: W3 Schools </p>"},{"location":"November/lesson1/","title":"Lesson 1: JavaScript basics","text":"<p>This self study guide will teach all you need to know about JavaScript.</p>"},{"location":"November/lesson1/#day-1","title":"Day 1","text":""},{"location":"November/lesson1/#installing-nodejs","title":"Installing NodeJS","text":"<ul> <li>Go to their official website</li> <li>Click download for your operating system</li> <li>For MacOS drag and drop the app into the applications folder</li> <li>For Windows use the built in installer</li> <li>For WSL Linux type in <code>sudo apt install node</code></li> </ul>"},{"location":"November/lesson1/#create-a-javascript-file","title":"Create a JavaScript file","text":"<ul> <li>Go on visual studio code</li> <li>Create a new \".js\" file</li> </ul>"},{"location":"November/lesson1/#start-using-javascript","title":"Start using JavaScript","text":"<p>To print \"hello world\" to the terminal you can do</p> <pre><code>console.log(\"hello world\");\n</code></pre> <p>To run the code type <code>node file.js</code> in the terminal where you replace <code>file</code> with the name of your javascript file</p> <p>This will do the same thing as print(\"Hello World\") on Python3</p> Try adding a semi-colon? Does the code give an error  The code does not give an error as JavaScript like the majority of programming languages require a semi-colon to end a line. This is unlike Python which is a unique language in this case. JavaScript is a hybrid as it neither requires nor does not support the use of semi-colons in code  <p></p>"},{"location":"November/lesson1/#day-2","title":"Day 2","text":""},{"location":"November/lesson1/#python-and-javascript-differences","title":"Python and JavaScript differences","text":""},{"location":"November/lesson1/#variables","title":"Variables","text":"<ul> <li>Create a variable exactly as how you do in python</li> <li>Now is your variable going to change. This will determine if it is constant or not</li> <li>The \"const\" keyword creates a constant variable which CANNOT be changed.</li> <li>The \"let\" keyword creates a mutable (you can change it) variable which CAN be changed</li> <li>Use the keyword you want in front of the variable name</li> </ul> <pre><code>const PI = 3.14159; // Immutable\nlet money = 9999; // Mutable\n</code></pre> Have you noticed something? (Hint: look after the semicolon)  The \"//\" character represents a comment in JavaScript. This is the same as how Python uses \"#\" as a comment. You will notice this change with other programming languages with some using other characters as a symbol for comments."},{"location":"November/lesson1/#conditionnals-and-loops","title":"Conditionnals and loops","text":"<ul> <li>First, create a python if statement like this</li> </ul> <pre><code>if (age &gt; 18):\n  print(\"access allowed\")\nelif (age &gt; 13):\n  print(\"Must be with a parent\")\nelse:\n  print(\"Not allowed\")\n</code></pre> <ul> <li>Then replace the colon for indentation with a pair of curly brackets</li> <li>The start goes where the usually is and the end goes right before the next condition</li> </ul> <p>Your conditionnal will now be like this</p> <pre><code>if (age &gt; 18) {\n  print(\"access allowed\");\n} elif (age &gt; 13) {\n  print(\"Must be with a parent\");\n} else {\n  print(\"Not allowed\");\n}\n</code></pre> <ul> <li>Remember how to print in JS? Think for 30 seconds</li> <li>Thats right! You use console.log();</li> <li>Now replace all the print statements with console.log!</li> </ul> <pre><code>if (age &gt; 18) {\n  console.log(\"access allowed\");\n} elif (age &gt; 13) {\n  console.log(\"Must be with a parent\");\n} else {\n  console.log(\"Not allowed\");\n}\n</code></pre> <p>We're still not done. You see how the \"elif\" has no color? This means it is not a valid statement.</p> <ul> <li>Replace the \"elif\" with \"else if\"</li> </ul> <p>Now you have your full if/else/else structure</p> <pre><code>if (age &gt; 18) {\n  console.log(\"access allowed\");\n} else if (age &gt; 13) {\n  console.log(\"Must be with a parent\");\n} else {\n  console.log(\"Not allowed\");\n}\n</code></pre> What is different about about the elif statement  Instead of using the word elif it uses the words else and if and if you use \"elif\" it will give an error.  <p></p> <p>Note that we use curly brackets to denote conditional loops and functions. Any thing inside the curly bracket is part of the function</p> What major part of python is technically optional in JavaScript  Indentation! You do not technically need to indent your code, but you should to make your code more readable and user-friendly  <p></p>"},{"location":"November/lesson1/#day-3","title":"Day 3","text":"<p>Now we can talk about where Python and JavaScript truly separate. This is with for loops.</p> <p>To create a for loop in JS follow these steps</p> <ul> <li>Create a for loop in python like this</li> </ul> <pre><code>for i in range(5):\n  print(i)\n</code></pre> <ul> <li>JavaScript uses a different way of formatting</li> <li>instead of</li> </ul> <pre><code>for i in range(5)\n</code></pre> <ul> <li>it uses</li> </ul> <pre><code>for (let i = 0; i &lt; 5; i++)\n</code></pre> <p>Now it looks like this is too complicated, but we will go step by step.</p> <ul> <li>The variable i (current number) is initialized at zero</li> <li>This is the same as python, but we have to state it explicitly</li> <li> <p>Now the next part \"i &lt; 5\" will say to run until the condition is not fulfilled. In this case it will tell python to run until the current number is NOT less than 5</p> </li> <li> <p>The next part \"i++\" is a short form of i = i + 1 or i += 1. The only thing this done is every time the loops run it will increaser i by 1.</p> </li> <li> <p>In conclusion this loop will set the current number to zero, run the loop until the number is greater than or equal to 5, and increase the current number by one each time the loop runs.</p> </li> </ul> <p>Now we have this</p> <pre><code>for (let i = 0; i &lt; 5; i++):\n  print(i)\n</code></pre> <ul> <li>Now remember to use curly brackets instead of indentation</li> <li>and to change print to console log</li> </ul> <p>and we are done!</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(i);\n}\n</code></pre>"},{"location":"November/lesson1/#day-4","title":"Day 4","text":""},{"location":"November/lesson1/#functions","title":"Functions","text":"<p>This day will be dedicated to functions and classes in JavaScript</p> <p>To define a function in JS first create a python function</p> <pre><code>def a(i):\n  return i*2\n</code></pre> <ul> <li>First replace the <code>def</code> keyword with the <code>function</code> keyword</li> <li>Next use curly braces as before</li> <li>You're done!</li> </ul> <p>The end result is this</p> <pre><code>function a(i) {\n  return i * 2;\n}\n</code></pre> <p>What is unique about JavaScript is that a function can be a variable. To convert a function to a variable, you have to just say</p> <pre><code>const myfunc = function (i) {\n  return i * 2;\n};\n</code></pre> <p>This will create a function named <code>myfunc</code> as a variable</p> <p>The last type of function we will use is the arrow function. This type of function does not require any keyword, but my be less intuitive to some people.</p> <pre><code>const myfunc = (i) =&gt; {\n  return i * 2;\n};\n</code></pre> Is this a variable function? Yes! This function has the keyword const for a variable and is thus a variable."},{"location":"November/lesson1/#classes","title":"Classes","text":"<p>Heres an example python3 class</p> <pre><code>class Car:\n  def __init__(self, color):\n    self.color = color\n  def drive():\n    print(\"Vroom\")\n</code></pre> <p>to convert this into JavaScript</p> <ul> <li>Convert the functions and add curly braces to the class</li> <li>change the name of <code>__init__</code> to <code>constructor</code> and remove the function keyword</li> <li>remove self and use <code>this</code> and not <code>self</code> (you don't need to add this as a parameter)</li> <li>Convert the other pieces of code such as the print statement</li> </ul> <p>The new JS class is</p> <pre><code>class Car {\n  constructor (color) {\n    this.color = color\n  }\n  function drive () {\n    console.log(\"Vroom!\");\n  }\n}\n</code></pre> What do both \"this\" and \"self\" represent? They represent the object it is modifying."},{"location":"November/lesson1/#day-5","title":"Day 5","text":"<p>This lesson is dedicated to the smaller differences between the two languages</p>"},{"location":"November/lesson1/#import","title":"Import","text":"<p>To import something in javascript use the import statement</p> <pre><code>import {function} from \"package\"\n</code></pre>"},{"location":"November/lesson1/#arrays","title":"Arrays","text":"<p>Arrays are similar as in Python, but you can't call on arr[-1]</p> <pre><code>const arr = [1, 2, 3];\n</code></pre> <p>You can also arrays using the new keyword</p> <ul> <li>Create a variable with a name</li> <li>Set it to a <code>new Array()</code></li> <li>Add the elements in the list as parameters</li> </ul> <pre><code>const arr = new Array(1, 2, 3);\n</code></pre>"},{"location":"November/lesson1/#dictionariesobjects","title":"Dictionaries/Objects","text":"<p>A dictionary and object are the same thing in Python and JavaScript, you even use the same curly bracket notation to define one</p> <pre><code>const mydict = {\n  name: \"bob\",\n  age: 15,\n};\n</code></pre> <p>Note that you do not need quotes on the key unlike python</p> <p>Now you can call</p> <pre><code>console.log(mydict.age);\n</code></pre> <p>Output</p> <pre><code>15\n</code></pre>"},{"location":"November/lesson2/","title":"Lesson 2: HTML and CSS Basics","text":"<p>This self-study guide will go over the basics of HTML and CSS. These technologies are important to structure and style your application. In the next lesson we will learn how to add JavaScript to make your website interactive</p>"},{"location":"November/lesson2/#day-1","title":"Day 1","text":"<p>The only thing you need to install is the \"Live Server\" extension on VSCode</p> <p>This will allow you to run your code in the browser</p> <ul> <li>Now create a HTML file in VSCode with the extension .html</li> <li>Type the \"!\" symbol and press enter. This will create some starter code.</li> <li>You must be using Visual Studio Code for this to work. If you are using any other ide please copy the code below</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"November/lesson2/#running-the-code","title":"Running the Code","text":"<p>To run this code click \"Go live on the bottom of VSCode\"</p> <p>This will open a new webpage at <code>localhost:5500</code></p> <p>This looks very complicated but lets go step by step</p> <p>Before we even look at the code we need to know what a tag is.</p>"},{"location":"November/lesson2/#element","title":"Element","text":"<ul> <li> <p>An element in HTML component is a is displayed on the browser. For example there is a Heading element, Button element and Link element.</p> </li> <li> <p>Each element has two tags, an opening and closing tag</p> </li> </ul> <p>To define an element use this syntax</p> <pre><code>&lt;tag-name&gt;Content&lt;/tag-name&gt;\n</code></pre> <p>The <code>&lt;tag-name&gt;</code> is the opening tag. The <code>tag-name</code> is the name of the tag such as <code>input</code> <code>button</code> or <code>ul</code>. The closing tag is the same as the opening tag, but has a backslash at the beginning after the <code>&lt;</code>.</p> <p>The content is in the middle which is displayed to the user. For example this is a button tag</p> <pre><code>&lt;button&gt;Click Me&lt;/button&gt;\n</code></pre> <p>This will display a button that says \"Click Me\"</p> <p>Now lets get back to the code.</p> <ul> <li>The <code>&lt;!DOCTYPE html&gt;</code> is a special tag that tells the browser that version of HTML it is. By writing <code>html</code> we assume it is the latest version</li> <li>The <code>html</code> tag defines the entire HTML code.</li> <li>There is a \"prop\" called lang which is pased on to the tag</li> <li>The current value is \"en\" which means the language is set to english</li> <li>The <code>head</code> tag defines data sent to the browser such as the name on the tab and the device width. We will mostly ignore this.</li> <li>The main part of HTML we will be using is the <code>body</code> tag.</li> <li>Currently it is empty, but this is where we add all the elements</li> <li>All elements seen in the browser will be here</li> </ul>"},{"location":"November/lesson2/#day-2","title":"Day 2","text":"<p>Lets add something to the body!</p> <pre><code>&lt;body&gt;\n  &lt;h1&gt;Hello!&lt;/h1&gt;\n&lt;/body&gt;\n</code></pre> <p>Now what is an h1 tag. Is that offbrand f1? Nice try, but no.</p>"},{"location":"November/lesson2/#h1-elements","title":"<code>h1</code> elementsh3","text":"<ul> <li><code>h</code> tags are heading elements.</li> <li>Each heading tag has a number after the <code>h</code></li> <li>For example <code>h1</code> <code>h2</code></li> <li>The smaller the number, the larger the heading</li> </ul> <p>Here is a diagram comparing the sizes</p> h1 h2 h4 h5 h6 <p>Is there an <code>h7</code> tag, maybe when GTA6 comes out, but not now. The maximum is an <code>h6</code> tag. If you want any smaller then that you can use CSS.</p>"},{"location":"November/lesson2/#p-elements","title":"<code>p</code> elements","text":"<p>p tags are simple paragraph elements</p> <p>to define them just do this</p> <pre><code>&lt;p&gt;\n  YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP\n  YAP YAP\n&lt;/p&gt;\n</code></pre> <p>Output</p> <p>YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP YAP   YAP YAP</p>"},{"location":"November/lesson2/#ul-and-li-elements","title":"<code>ul</code> and <code>li</code> elements","text":"<p>These elements are used to make a list in HTMl</p> <ul> <li>First create a <code>ul</code> element</li> </ul> <pre><code>&lt;ul&gt;&lt;/ul&gt;\n</code></pre> <p>Right now you see nothing. That is because there is no element inside the list</p> <ul> <li>Add li elements which are the elements you want to show in your list</li> </ul> <p>Now your list is this</p> <pre><code>&lt;ul&gt;\n  &lt;li&gt;Yap Point 1&lt;/li&gt;\n  &lt;li&gt;Yap Point 2&lt;/li&gt;\n  &lt;li&gt;Yap Point 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Output:</p> <ul> <li>Yap Point 1</li> <li>Yap Point 2</li> <li>Yap Point 3</li> </ul>"},{"location":"November/lesson2/#day-3","title":"Day 3","text":""},{"location":"November/lesson2/#challenge","title":"ChallengeFull Stack Developer and History BuffObjective:","text":"<p>Create a full resume with only HTML. Use headings, paragraph and list tags to create an appealing portfolio of your skills.</p> <p>Example</p> Nimay Desai <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras quis risus augue. Fusce quis odio ut tortor faucibus vulputate. Ut dapibus, quam eu tincidunt tristique, massa risus vestibulum nibh, finibus suscipit massa augue in sem. Suspendisse rhoncus tortor dui. Maecenas neque ante, fringilla et sem et, ullamcorper fringilla massa. Sed auctor quis ante quis sagittis. Praesent turpis justo, ultricies nec venenatis vel, varius ac risus. In ornare, ipsum sed suscipit euismod, enim felis porttitor ex, at pharetra dui magna a dolor. Donec eleifend sit amet dui nec tempus. </p> <ul> <li>Morbi sollicitudin, mauris quis rutrum tempor, diam urna euismod</li> <li>lorem, semper malesuada ligula turpis in arcu. In bibendum aliquet turpis, ut sagittis quam ornare sit amet. Fusce pharetra massa ut condimentum mollis.</li> <li>Curabitur mattis turpis vel porta hendrerit. Phasellus faucibus, tellus ac placerat aliquam, mi metus fringilla tellus, in malesuada. </li> </ul>"},{"location":"November/lesson2/#day-4","title":"Day 4","text":""},{"location":"November/lesson2/#css-basics","title":"CSS Basics","text":"<p>Now right now our resume looks ugly. If somewhere saw this resume you would turn from accepted to rejected. We need to make it look better, but how you say. CSS! A tool sent from the heavens to style your website!</p> <p>Steps</p> <ul> <li>First, create a CSS file with the extension <code>.css</code> ex. <code>styles.css</code></li> <li>Now go back to your HTML file</li> <li>Add this inside the <code>head</code> tag of your code</li> </ul> <pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;&lt;/link&gt;\n</code></pre> <p>Remember to make the href the same as the name of your CSS file.</p> Do you notice anything? The content of the link tag is empty! That means it is useless. We can use a self closing tag if the tag has no content and only props.  <pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" /&gt;\n</code></pre> <p>Wow so cool!</p>"},{"location":"November/lesson2/#using-css","title":"Using CSS","text":"<p>Lets start by making the heading orange (because why not!)</p> <ul> <li>Go on the <code>.css</code> file</li> <li>First, what do we need to modify (the <code>h1</code> element)</li> <li>Type the name of the element you want to modify</li> <li>Also add curly brackets (Like JS)</li> </ul> <p>Ex.</p> <pre><code>h1 {\n}\n</code></pre> <ul> <li>Now we need to set some attributes</li> <li>This is just like a dictionary/object with a key-value pair</li> <li>In this we will modify the <code>color</code> key</li> <li>We will set this value to <code>orange</code></li> </ul> <pre><code>h1 {\n  color: orange;\n}\n</code></pre> <p>Voila! the heading is now orange.</p>"},{"location":"November/lesson2/#exercise","title":"Exercise","text":"<p>Set every single part of our resume to orange</p>"},{"location":"November/lesson2/#day-5","title":"Day 5","text":"<p>We have a list of bullet points in the form of <code>ul</code> and <code>li</code>. With out current setup we cannot set different colors for each bullet point as setting <code>li</code> to one color sets ALL lis.</p> <p>Lets fix that!</p> <p>We need to identify each element with a class so we HTML knows what to change</p> <p>To do this add the class prop to anything</p> <p>Ex.</p> <pre><code>&lt;ul&gt;\n  &lt;li class=\"yap-1\"&gt;Yap point 1&lt;/li&gt;\n  &lt;li class=\"yap-2\"&gt;Yap point 2&lt;/li&gt;\n  &lt;li class=\"yap-3\"&gt;Yap point 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Now in your CSS add a field for <code>.class-name</code> in this example it is <code>.yap-1</code></p> <pre><code>.yap-1 {\n  color: red;\n}\n</code></pre> Is `.h1` and `h1` the same? No .h1 refers to the class \"h1\" while h1 refers to the HTML element"},{"location":"November/lesson2/#foreword","title":"Foreword","text":"<p>This lesson only went through the basic HTML tags and props. If you want to learn more about them please consult the resources to learn all the props available.</p> <p>In this next lesson we are going to learn how to make this interactive.</p>"},{"location":"November/lesson3/","title":"Lesson 3: JavaScript and HTML/CSS","text":"<p>This self study guide will go over how to integrate JavaScript with your HTML and CSS code. This will allow your website to not become boring like edward</p> <p>In this lesson we are going to be building a number guesser.</p>"},{"location":"November/lesson3/#day-1","title":"Day 1","text":""},{"location":"November/lesson3/#app-description","title":"App Description","text":"<ul> <li>This will choose a number between 1 and 100</li> <li>If the number is up to 5 greater or lesson, it is hot</li> <li>If it is up to 10 it is warm</li> <li>If it is up to 30 it is cool</li> <li>Else it is freezing</li> </ul> Try making an if/else if/else (Hint use the Math.abs() function for absolute val) conditional with this game   Solution here"},{"location":"November/lesson3/#html-creation","title":"HTML Creation","text":"<p>Lets start by creating an empty HTML file. Use the <code>!</code> shortcut to create some boilerplate code.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Steps</p> <ul> <li>Lets give this website a good name.</li> <li>Add an <code>h1</code> element that describes the app</li> </ul>"},{"location":"November/lesson3/#day-2","title":"Day 2","text":""},{"location":"November/lesson3/#html-forms","title":"HTML Forms","text":"<p>Forms are a special HTML element contained of multiple elements. These elements work together to create a form.</p> <p>The two that we will be using are Inputs and Buttons</p>"},{"location":"November/lesson3/#input","title":"Input","text":"<ul> <li>Input records data typed by the user, such as a guess.</li> <li>It will then send this to the JavaScript when submitted</li> </ul>"},{"location":"November/lesson3/#button","title":"Button","text":"<ul> <li>Buttons are elements that when clicked on, and inside a form submits a form</li> <li>Buttons can also do actions independently of a form</li> </ul>"},{"location":"November/lesson3/#code","title":"Code","text":"<p>Now to create a form with an input and button type this</p> <pre><code>&lt;form&gt;\n  &lt;input id=\"guess\" type=\"text\" /&gt;\n  &lt;label for=\"guess\"&gt;Enter a number&lt;/label&gt;\n  &lt;button type=\"submit\"&gt;Guess!&lt;/button&gt;\n  &lt;h1 id=\"out\"&gt;&lt;/h1&gt;\n  &lt;h1 id=\"num\"&gt;0 Guesses left&lt;/h1&gt;\n&lt;/form&gt;\n</code></pre> <p>Now what is a label. A label is an element that describes an input</p>"},{"location":"November/lesson3/#labels","title":"Labels","text":"<p>What do labels need</p> <ul> <li>Content that describes the input</li> <li>The id of the input it is describing</li> </ul>"},{"location":"November/lesson3/#ids","title":"IDs","text":"<p>Now you see the ID prop on these elements. You might be wondering what are IDS</p> <p>IDs are similar to classes in that it tells HTML what to modify, but are generally used for one or a few elements. Therefore they take precedence over classes during a conflict.</p> <p>IDs must be unique in the entire page unlike edward who can't be unique a single time</p> If an object represents a large number of student names, should you use an ID or Class   You should use a class is it describes a large amount of data"},{"location":"November/lesson3/#day-3","title":"Day 3","text":"<p>Now lets start writing JS code. First we need to wait for all the HTML load (DOM). To do that type this</p> <pre><code>document.addEventListener(\"DOMContentLoaded\", init);\n</code></pre> <p><code>document</code> refers to the HTML document. This code waits until the DOM is loaded then runs the init function. Now we dont have an init function just yet. Lets create one at the top!</p> <pre><code>const init = () =&gt; {\n  document.getElementById(\"button-send\").addEventListener(\"click\", calc);\n};\n</code></pre> <p>This piece of code will get the <code>button-send</code> and wait until it is clicked</p> <p>If it is clicked it will run the calculate function.</p> <p>Now lets make the calculate function.</p> <p>Remember the exercise from before. Copy that code into the document (See homework is useful kids!)</p> <pre><code>const calc = function () {\n  let diff = Math.abs(num - parseInt(guess));\n\n  if (diff === 0) {\n    console.log(\"CORRECT\");\n  } else if (diff &lt;= 5) {\n    console.log(\"HOT\");\n  } else if (diff &lt;= 10) {\n    console.log(\"WARM\");\n  } else if (diff &lt;= 30) {\n    console.log(\"COOL\");\n  } else {\n    console.log(\"FREEZING\");\n  }\n};\n</code></pre> <ul> <li>Now lets create a variable called output and set the values instead of logging them.</li> <li>Then lets run <code>e.preventDefault</code> which will not do the default action and run the function instead. For this we need to take e which is the event handler (we will explain this later)</li> <li>Next lets get the elements value by making the guess equal to the <code>document.getElementById(\"guess\").value</code></li> <li>This will get the element with ID \"guess\" and get the value contained inside</li> </ul> <p>Our code currently looks like this</p> <pre><code>const calc = function (e) {\n  e.preventDefault();\n  const guess = document.getElementById(\"guess\").value;\n  let diff = Math.abs(num - parseInt(guess));\n\n  if (diff === 0) {\n    out = \"CORRECT\";\n  } else if (diff &lt;== 5) {\n    out = \"HOT\";\n  } else if (diff &lt;== 10) {\n    out = \"WARM\";\n  } else if (diff &lt;== 30) {\n    out = \"COOL\";\n  } else {\n    out = \"FREEZING\";\n  }\n};\n</code></pre>"},{"location":"November/lesson3/#day-4","title":"Day 4","text":"<p>Next we need to show this <code>out</code> to the user.</p> <p>First lets modify the element with the class out which represents the output <code>h1</code></p> <p>Right now it is empty, but we cant modify it with this</p> <pre><code>document.getElementById(\"out\").innerHTML = `${out}`;\n</code></pre> <p>The backticks in JS allow you to insert variables into string by inserting the variable name between <code>${}</code></p> <p>This will set the content of the element with id <code>out</code> to <code>${out}</code></p> <p>Next we need to generate a random number</p> <p>We will create a random generator function that will generate an integer from 1 to 100</p> <pre><code>const genNum = () =&gt; Math.floor(Math.random() * 100);\n\nlet num = genNum();\n</code></pre> <p>genNum is an arrow function. If it is a one line with no curly brackets, the content after the arrow is automatically returned</p> <p>Then we set a global variable that will represent the current number</p> <p>Now we need to reset the number when a correct attempt is created</p> <p>To do this we can just set the num = genNum(); in the function</p> <pre><code>if (diff === 0) {\n  out = \"CORRECT\";\n  num = genNum();\n}\n</code></pre> <p>Our application is now done for the core features. You can continue and learn how to do bonus features.</p>"},{"location":"November/lesson3/#day-5","title":"Day 5","text":""},{"location":"November/lesson3/#bonus","title":"Bonus","text":""},{"location":"November/resources/","title":"Web Development Resources","text":"<p>This study guide will only give a basic overview of the concept, and these videos or documentation will give a more thorough tutorial on these concepts.</p>"},{"location":"November/resources/#stage-1-javascript","title":"Stage 1: JavaScript","text":""},{"location":"November/temp/","title":"Day 2","text":""},{"location":"November/temp/#creating-the-project","title":"Creating the project","text":"<p>To create a basic ReactJS project open the terminal and type <code>npx create-react-app &lt;your project name&gt;</code> Replace <code>&lt;your project name&gt;</code> with the name you want. This will create a new folder containing your application</p>"},{"location":"November/temp/#day-3","title":"Day 3","text":""},{"location":"November/temp/#create-a-basic-page","title":"Create a basic page","text":"<p>Go to the src folder of your new project and then the App.Js file. This will contain the HTML and JavaScript you need to get started Remove all the code in the project and add this</p> <pre><code>import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return &lt;div&gt;Hello World&lt;/div&gt;;\n}\n\nexport default App;\n</code></pre>"},{"location":"November/temp/#day-4-5-6-7-watch-10-15-min-of-the-video-per-day","title":"Day 4, 5, 6, 7 (Watch 10-15 min of the video per day)","text":"<p>This will create an empty page with the text hello right now. Try adding more tags by going on Net Ninjas HTML tutorial (Episode 2 and 3) and learning some tags. He will use basic HTML, the only difference is that you must put your html code in the return statement and instead of \"class\" you type \"className\".</p>"},{"location":"November/temp/#primary-html-tags","title":"Primary HTML Tags","text":"<pre><code>&lt;a href=\"/\"&gt;Hey! Im a Link&lt;/a&gt;\n</code></pre> <p>This is an \"a\" tag. This representss a link to another page on the website such as the login page. The href represents where you want to go. Relative routes are to go to any page in the website. For example if you want to go to the login page hosted at /login the href value would be '/login'. For external websites you would type its HTTPS address</p>"},{"location":"November/temp/#day-8","title":"Day 8","text":""},{"location":"November/temp/#styling","title":"Styling","text":"<p>To style this Hello world component you can use CSS. First add a class name so the CSS knows what to modify. You can enter any name, but you should use a descriptive name. In this example we will call this main-text</p> <pre><code>import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return &lt;div className=\"main-text\"&gt;Hello World&lt;/div&gt;;\n}\n\nexport default App;\n</code></pre>"},{"location":"November/temp/#day-9-10-11-watch-10-15-min-per-day","title":"Day 9, 10, 11 (Watch 10-15 min per day)","text":"<p>Now that we have a class name to identify it we can style it. Go to App.css to further modify it. Again remove everything and add this. Try adding more styling on CSS elements by refering to Net Ninjas HTML and CSS tutorial (Episode 4)</p> <pre><code>.main-text {\n  color: blue;\n}\n</code></pre> <p>This will make all elements with the class \"main-text\" the color blue.</p> <p>Lets add some interactivity to the page</p>"},{"location":"November/temp/#day-12","title":"Day 12","text":""},{"location":"November/temp/#javascript","title":"JavaScript","text":"<p>First go back to App.js add a button the user can click by using the button tag</p> <pre><code>import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return;\n  &lt;&gt;\n    &lt;div className=\"main-text\"&gt;Hello World&lt;/div&gt;\n    &lt;button&gt;Click Me&lt;/button&gt;\n  &lt;/&gt;;\n}\n\nexport default App;\n</code></pre> <p>Then we will use the on click prop (field) to run a piece of code when the button is clicked</p> <pre><code>import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;div className=\"main-text\"&gt;Hello World&lt;/div&gt;\n      &lt;button onClick={() =&gt; console.log(\"Hello!\")}&gt;Click Me&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"November/temp/#day-13-14","title":"Day 13, 14","text":"<p>Lets make some more complex program. We will make a program that will continously increase the number on display when clicked. Import the \"useState\" function from react. This will create a variable caleld number and a function that sets the number to any value. Const means a constant value that wont change directly, but can be changed indirectly such as with use state. The useState function takes in a prop which is the default value of number. Refer to this for more info on hooks</p> <pre><code>import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  const [number, setNumber] = useState(0);\n  return (\n    &lt;&gt;\n      &lt;div className=\"main-text\"&gt;{number}&lt;/div&gt;\n      &lt;button onClick={() =&gt; setNumber(number + 1)}&gt;Click Me&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>The {} shows that you will pass on a variable instead of raw text. Now when you click the button the number will go up</p>"},{"location":"October/lesson1/","title":"Lesson 1: Object Oriented Programming","text":""},{"location":"October/lesson1/#day-1","title":"Day 1","text":""},{"location":"October/lesson1/#overview","title":"Overview","text":"<p>This self-study guide will cover how to use object oriented programming. This will include making classes, constructors and methods inside classes, along with calling these functions. This lesson will assume you have a working Python environment using Python (3.10.12) or later, though you only need version 3.0.0 to follow most of the course</p>"},{"location":"October/lesson1/#day-2","title":"Day 2","text":""},{"location":"October/lesson1/#classes","title":"Classes","text":"<p>Classes can represent any object that has properties and/or functions. For example a car has properties of the number of wheels, the length width, etc... Classes can also include subclasses such as a wheel for the example of a car.&gt;</p>"},{"location":"October/lesson1/#day-3","title":"Day 3","text":""},{"location":"October/lesson1/#declaration","title":"Declaration","text":"<p>To declare a class use the class keyword follow by the name of the class. Like functions the contents of the class MUST be indented</p> <pre><code>class Car:\n</code></pre>"},{"location":"October/lesson1/#day-4","title":"Day 4","text":""},{"location":"October/lesson1/#fields-and-constructor","title":"Fields and Constructor","text":"<p>The fields of the class are variables that the class needs such as wheels or length in the previous example. Constructors are a function that is called when the class is initialized. This can include setting default values or setting values from the user.</p> <p>In python a constructor MUST be called \"__init__\"</p> <p>Heres an example of a field and constructor.</p> <pre><code>class Car:\n    __init__(self, brand, color, integrity):\n      self.brand = brand\n      self.color = color\n      self.integrity = integrity\n</code></pre> <p>Note that the first argument is self representing the object that is created</p>"},{"location":"October/lesson1/#day-5","title":"Day 5","text":"<p>As said before classes can have functions that can modify that data or perform another task. As an example of a car we can repair it increasing the integrity</p> <pre><code>class Car:\n    __init__(self, brand, color, integrity):\n      self.brand = brand\n      self.color = color\n      self.integrity = integrity\n    repair(self):\n        if (self.integrity &gt; 80):\n            self.integrity = 100\n        else:\n            self.integrity += 20\n</code></pre> <p>This will increase the cars integrity by 20% when called</p>"},{"location":"October/lesson1/#day-6","title":"Day 6","text":""},{"location":"October/lesson1/#create-an-object","title":"Create an object","text":"<p>To create an object of the class you can just initialize a variable of the class</p> <pre><code>car1 = Car(\"Toyota\", \"red\", 99)\n</code></pre> <p>This will create a red toyota with 99% integrity</p>"},{"location":"October/lesson1/#day-7","title":"Day 7","text":"<p>Create a class plan which represents the properties of a plane such as length, capacity, color, maker etc... Make sure you add a constructor and some functions such as fly and land</p>"},{"location":"October/lesson1/#next-steps","title":"Next Steps","text":"<p>Read about OOP on W3Schools if you want more information or continue to the next lesson</p>"},{"location":"October/lesson2/","title":"Lesson 2: Object Oriented Programming","text":""},{"location":"October/lesson2/#overview","title":"Overview","text":"<p>This self-study guide will cover how to use object oriented programming for more advanced cases. This will include inheritance, abstraction, encapsulation and polymorphism This lesson will assume you have a working Python environment using Python (3.10.12) or later, though you only need version 3.0.0 to follow most of the course</p>"},{"location":"October/lesson2/#the-4-pillars-of-object-oriented-programming","title":"The 4 Pillars of Object Oriented Programming","text":"<p>There are 4 main pillars in Object-Oriented Programming or (OOP) which are essential for good code. These are abstraction, inheritance, encapsulation and polymorphism</p>"},{"location":"October/lesson2/#inheritance","title":"Inheritance","text":"<p>Inheritance is when you a class is based on another class. For example you can have a vehicle class, and subclasses inheriting from them such as cars, trucks and planes</p> <pre><code>class Vehicle:\n  __init__(self, color, speed):\n    self.color = color\n    self.speed = speed\n  drive(self):\n    print(\"Driving at \", speed)\n\n\nclass Car(Vehicle):\n  __init__(self, color, wheels, speed):\n    self.color = color\n    self.speed = speed\n    self.wheels = wheels\n\nclass Boat(Vehicle):\n  __init__(self, color, speed, captain):\n    self.color = color\n    self.speed = speed\n    self.captain = captain\n</code></pre>"},{"location":"October/lesson2/#abstraction","title":"Abstraction","text":"<p>Abstraction is when you hide the background process going on to do a task, and only see the end result of the task which is the only thing they need to see.</p> <pre><code>class Car:\n</code></pre>"},{"location":"October/lesson2/#fields-and-constructor","title":"Fields and Constructor","text":"<p>The fields of the class are variables that the class needs such as wheels or length in the previous example. Constructors are a function that is called when the class is initialized. This can include setting default values or setting values from the user.</p> <p>In python a constructor MUST be called \"__init__\"</p> <p>Heres an example of a field and constructor.</p> <pre><code>class Car:\n    __init__(self, brand, color, integrity):\n      self.brand = brand\n      self.color = color\n      self.integrity = integrity\n</code></pre> <p>Note that the first argument is self representing the object that is created</p> <p>As said before classes can have functions that can modify that data or perform another task. As an example of a car we can repair it increasing the integrity</p> <pre><code>class Car:\n    __init__(self, brand, color, integrity):\n      self.brand = brand\n      self.color = color\n      self.integrity = integrity\n    repair(self):\n        if (self.integrity &gt; 80):\n            self.integrity = 100\n        else:\n            self.integrity += 20\n</code></pre> <p>This will increase the cars integrity by 20% when called</p>"},{"location":"October/lesson2/#create-an-object","title":"Create an object","text":"<p>To create an object of the class you can just initialize a variable of the class</p> <pre><code>car1 = Car(\"Toyota\", \"red\", 99)\n</code></pre> <p>This will create a red toyota with 99% integrity</p>"},{"location":"October/lesson2/#next-steps","title":"Next Steps","text":"<p>Read about OOP on W3Schools if you want more information or continue to the next lesson</p>"},{"location":"September/lesson1/","title":"Lesson 1: Your First Program","text":""},{"location":"September/lesson1/#programming-basics","title":"Programming Basics","text":"<p>This lesson will go over how to make your first program in Python which is one of the most popular, simple and widely used programming languages out there. This will teach basic concepts such as output, input, variables, loops and conditionels. This lesson will assume you have a working Python environment using Python (3.10.12) or later.</p>"},{"location":"September/lesson1/#output","title":"Output","text":"<p>To print text into the conosle, use the print(\"function)</p> <pre><code>print(\"Hello World!\")\n</code></pre> <p>Output:</p> <pre><code>Hello World!\n</code></pre> <p>This function will output Hello World! into the terminal. Text must be wrapped within quotes (This is called a string)</p> <p>To print a number, you can do the same thing without the quote as numbers are not a string</p> <pre><code>print(9)\n</code></pre> <p>Output:</p> <pre><code>9\n</code></pre>"},{"location":"September/lesson1/#variables","title":"Variables","text":"<p>Variables store data into memory to be accessed later. A variable must have a name to be assigned and a value. To decalre a variable type this</p> <pre><code>age = 15\n</code></pre> <p>This will assign the variable \"age\" to the value 15. This value can be access later in different situations, by replacing the value with the variable</p> <pre><code>print(age)\n</code></pre> <p>Output:</p> <pre><code>15\n</code></pre> <p>The value can be modified later also, but it will only apply to the lines after it is changed</p> <pre><code>age = 10\nprint(age)\nage = 15\nprint(age)\n</code></pre> <p>Output:</p> <pre><code>10\n15\n</code></pre> <p>There are 4 main types of variables we will go in this lesson each representing different values</p>"},{"location":"September/lesson1/#strings","title":"Strings","text":"<p>These values represent text and is surruounded with single or double quotes</p> <pre><code>name = \"bob\"\nname2 = 'john'\n</code></pre>"},{"location":"September/lesson1/#integers","title":"Integers","text":"<p>These values represent a non decimal number postive or negative</p> <pre><code>age = 15\nscore = 99\n</code></pre>"},{"location":"September/lesson1/#floats","title":"Floats","text":"<p>These values represent a postive or negative decimal</p> <pre><code>cost = 4.99\nlength = 9.87\n</code></pre>"},{"location":"September/lesson1/#booleans","title":"Booleans","text":"<p>These values represent a value of either True or False</p> <pre><code>is_allowed = True\nis_male = False\n</code></pre>"},{"location":"September/lesson1/#input","title":"Input","text":"<p>To recieve an input from the user and store it into a variable, use the input() function</p> <pre><code>name = input(\"Please enter your name\")\n</code></pre> <p>To use recieve non-strings as input, you must convert it into that type</p> <pre><code>age = int(input(\"Please enter your name\"))\ncost = float(input(\"Please enter the cost\"))\n</code></pre> <p>For boolean, an empty string or the number 0 is False, while other values are considered True</p>"},{"location":"September/lesson1/#next-steps","title":"Next Steps","text":"<p>Read the next lesson</p>"},{"location":"September/lesson2/","title":"Lesson 2: Conditionals and Loops","text":""},{"location":"September/lesson2/#programming-basics","title":"Programming Basics","text":"<p>This lesson will go over how to loop over data and use conditionals to add dynamic code to your project. This lesson will assume you have a working Python environment using Python (3.10.12) or later.</p>"},{"location":"September/lesson2/#conditional","title":"Conditional","text":"<p>To check if a variable is equal to a value, use the if statement</p> <pre><code>age = 5\nif (age == 5):\n   print(\"You are 5 years old\")\n</code></pre> <p>Output:</p> <pre><code>You are 5 years old\n</code></pre> <p>Note that we used two equal signs. This notes that it is a condition, not a declaration of a variable. Code that runs after a condition is true must be indented either 2 or 4 spaces relative to the statement</p> <p>To use the greater, greater or equal, less, less or equal signs, use the following signs in order &gt; (greater), &gt;= (greater or equal), &lt; (less), (&lt;=) less or equal</p> <pre><code>age = 4\nif (age &lt; 5):\n   print(\"You are less than 5 years old\")\n</code></pre> <p>Output:</p> <pre><code>You are less than 5 years old\n</code></pre> <p>The same is true for all the other signs</p>"},{"location":"September/lesson2/#negation","title":"Negation","text":"<p>To run the statement if the condition is NOT True use the exclamatoin mark ! or use the not keyword</p> <pre><code>name = \"Bob\"\nif (name != \"John\"):\n   print(\"Your name is Bob\")\n</code></pre> <p>This piece of code run if the name is NOT \"John\"</p>"},{"location":"September/lesson2/#else-statements","title":"Else statements","text":"<p>This piece of code runs if the previvous condition is not true. For example if the age is not greater than 15 than can run another condition</p> <pre><code>name = \"Bob\"\nif (name != \"John\")\n  print(\"Your name is Bob\")\nelse:\n  print(\"Your name is John\")\n</code></pre> <p>The else statement will run ONLY if the name is John</p>"},{"location":"September/lesson2/#else-if-statements","title":"Else if statements","text":"<p>This piece of code runs if the previvous condition is not true. Unlike an else this includes a condition. Multiple else if can be used in paralled going from the top to the bottom</p> <pre><code>name = \"Bob\"\nif (name == \"Bob\")\n  print(\"Your name is Bob\")\nelse if (name == \"John\"):\n   print(\"Your name is John\")\nelse if (name == \"Edward\"):\n  print(\"Your name is Edward\")\nelse:\n  print(\"Your name is not Bob John or edward\")\n</code></pre>"},{"location":"September/lesson2/#output","title":"Output","text":"<pre><code>Your name is Bob\n</code></pre> <p>The code will run top to bottom from the if to the else. If the condition isnt met it will go to the next statement.</p>"},{"location":"September/lesson2/#loops","title":"Loops","text":"<p>Loops make it easier to run a piece of code continously until a condition is fufilled. There are 2 main types of loops: a while loop and a for loop</p>"},{"location":"September/lesson2/#while-loops","title":"While Loops","text":"<p>While loops run until a condition is fufilled. If that condition is not fufilled it will continue running. If you put while (True) it will run forever, while doing While(False) will make it not run</p> <pre><code>password = \"\"\nwhile (password != \"password123\")\n  password = input(\"Please enter the password \")\nprint(\"Access Granted\")\n</code></pre>"},{"location":"September/lesson2/#input","title":"Input","text":"<pre><code>Please enter the password bob\nPlease enter the password bob2\nPlease enter the password password123\n</code></pre>"},{"location":"September/lesson2/#output_1","title":"Output","text":"<pre><code>Access Granted\n</code></pre>"},{"location":"September/lesson2/#for-loops","title":"For Loops","text":"<p>For loops run for a set number of times, not until a condition is fufilled. For example you can make it run 3 times then exit.</p> <pre><code>for i in range(5):\n  print(i)\n</code></pre>"},{"location":"September/lesson2/#output_2","title":"Output","text":"<pre><code>0\n1\n2\n3\n4\n</code></pre> <p>In this loop i represents the current number and range(5) represnts the number up to 5, but not including 5 (0, 1, 2, 3, 4)</p>"},{"location":"September/lesson2/#break-statements","title":"Break statements","text":"<p>Break statements manually exit the loop even if the outer condition is not fufilled or the set number of times the loop should run is not reached</p> <pre><code>for i in range(5):\n  print(i)\n  if (i == 2):\n    break\n</code></pre>"},{"location":"September/lesson2/#output_3","title":"Output","text":"<pre><code>0\n1\n2\n</code></pre>"},{"location":"September/lesson2/#next-steps","title":"Next Steps","text":"<p>Read the next lesson (1.3)</p>"}]}